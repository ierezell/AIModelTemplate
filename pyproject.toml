[tool.poetry]
name = "aimodel"
version = "0.1.0"
description = ""
authors = ["Pierre Snell <pierre.snell@botpress.com>"]

[tool.poetry.scripts]
cli = "aimodel.cli:cli"

[tool.poetry.build]
generate-setup-file = true

[tool.poetry.dependencies]
python = "^3.11"
en_core_web_lg = { url = "https://github.com/explosion/spacy-models/releases/download/en_core_web_lg-3.7.1/en_core_web_lg-3.7.1-py3-none-any.whl" }
click = "^8.1.7"
rich = "^13.7.1"
fastapi = "^0.110.0"
spacy = "^3.7.4"
pytorch-lightning = "^2.2.1"
attrs = "^23.2.0"
boto3 = "^1.34.62"
wandb = "^0.16.4"
uvicorn = "^0.28.0"
uvloop = "^0.19.0"
onnx = "^1.15.0"
onnxruntime = "^1.17.1"
optimum = "^1.17.1"
datasets = "^2.18.0"

[tool.poetry.group.dev.dependencies]
isort = "^5.13.2"
boto3-stubs = "^1.34.62"
ruff = "^0.3.2"
black = "^24.2.0"
pre-commit = "^3.6.2"
ipykernel = "^6.29.3"
pytest = "^8.1.1"
flake8 = "^7.0.0"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"


[tool.black]
target-version = ["py311"]
preview = true
line-length = 88

[tool.pytest.ini_options]
filterwarnings = [""]
# addopts = "-n auto"


[tool.ruff]
# Enable Pyflakes `E` and `F` codes by default.
# F Pyflake
# E, W pycodestyle
# C mccabe
# I isort
# N  pep8 Naming
# D pydocstyle
# UP pyupgrade
# YTT flake8 2020
# ANN flake8 annotations
# S flake8-bandit
# BLE flake8-blind-except
# FBT flake8-boolean-trap
# B flake8-bugbear
# A flake8-builtins
# COM flake8-commas
# C4 flake8-comprehensions
# DTZ flake8-datetimez
# T10 flake8-debugger
# DJ flake8-django
# EM flake8-errmsg
# EXE flake8-executable
# ISC flake8-implicit-str-concat
# ICN flake8-import-conventions
# G flake8-logging-format
# INP flake8-no-pep420
# PIE flake8-pie
# T20 flake8-print
# PYI flake8-pyi
# PT flake8-pytest-style
# Q flake8-quotes
# RET flake8-return
# SIM flake8-simplify
# TID flake8-tidy-imports
# TCH flake8-type-checking
# ARG flake8-unused-arguments
# PTH flake8-use-pathlib
# ERA eradicate
# PD pandas-vet
# PGH pygrep-hooks
# PL Pylint
# PLC     Convention
# PLE     Error
# PLR     Refactor
# PLW     Warning
# TRY tryceratops
# RSE flake8-raise
# SLF flake8-self
# RUF Ruff-specific rules
lint.select = [
    "F",
    "E",
    "I",
    "N",
    "D",
    "UP",
    "YTT",
    "ANN",
    "S",
    "BLE",
    "FBT",
    "B",
    "A",
    "COM",
    "C4",
    "DTZ",
    "T10",
    "EM",
    "EXE",
    "ISC",
    "ICN",
    "INP",
    "PIE",
    "T20",
    "PT",
    "Q",
    "RET",
    "SIM",
    "TID",
    "ARG",
    "ERA",
    "PD",
    "PGH",
    "PLC",
    "PLE",
    "PLR",
    "PLW",
    "TRY",
    "RUF",
]

lint.ignore = [
    "D",
    "EXE002",
    "PLR0913",
    "S311",
] # All Documentation related + The file is executable but no shebang is present

# Allow autofix for all enabled rules (when `--fix`) is provided.
lint.fixable = [
    "F",
    "E",
    "I",
    "N",
    "D",
    "UP",
    "YTT",
    "ANN",
    "S",
    "BLE",
    "FBT",
    "B",
    "A",
    "COM",
    "C4",
    "DTZ",
    "T10",
    "EM",
    "EXE",
    "ISC",
    "ICN",
    "INP",
    "PIE",
    "T20",
    "PT",
    "Q",
    "RET",
    "SIM",
    "TID",
    "ARG",
    "ERA",
    "PD",
    "PGH",
    "PLC",
    "PLE",
    "PLR",
    "PLW",
    "TRY",
    "RUF",
]
lint.unfixable = ["B", "ERA001"]

# Exclude a variety of commonly ignored directories.
exclude = [".git", ".ruff_cache", ".venv", "build", "dist"]

# Same as Black.
line-length = 88

# Allow unused variables when underscore-prefixed.
lint.dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

# Assume Python 3.11.
target-version = "py311"

[tool.ruff.lint.mccabe]
# Unlike Flake8, default to a complexity level of 10.
max-complexity = 10

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["E402"]
"*_test.py" = ["S101"]
"test_*.py" = ["S101"]
"*" = ["D"]
